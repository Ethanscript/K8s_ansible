- name: 'add proxy setting to /etc/environment'
  blockinfile:
    path: /etc/environment
    block: |
      export http_proxy="http://172.17.19.30:8888"
      export https_proxy="http://172.17.19.30:8888"
      export no_proxy="172.17.15.142,172.17.15.143,172.17.15.144,172.17.15.145,172.17.15.146,192.168.0.0/16,10.96.0.0/12"

- name: source
  shell: . /etc/environment
  become: true 

- name: Creating a configuration file for containerd
  file:
    path: "/etc/modules-load.d/containerd.conf"
    state: "touch"

- name: setting up pre-requisites for containerd
  blockinfile:
    path: "/etc/modules-load.d/containerd.conf"
    block: |
      overlay
      br_netfilter

- name: loading required modules
  shell: |
    sudo modprobe overlay
    sudo modprobe br_netfilter
      
- name: configuring network settings for Kube 
  file:
    path: "/etc/sysctl.d/99-kubernetes-cri.conf"
    state: "touch"

- name: adding required settings for containerd
  blockinfile:
    path: "/etc/sysctl.d/99-kubernetes-cri.conf"
    block: |
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1
      net.bridge.bridge-nf-call-ip6tables = 1

- name: make settings applicable without restart
  command: sudo sysctl --system

- name: install containerd package
  shell: |
    wget https://github.com/containerd/containerd/releases/download/v1.5.11/cri-containerd-cni-1.5.11-linux-amd64.tar.gz
    tar -C / -zxvf cri-containerd-cni-1.5.11-linux-amd64.tar.gz

- name: set containerd config
  shell: |
    sudo mkdir -p /etc/containerd
    sudo containerd config default | sudo tee /etc/containerd/config.toml

- name: change Cgroup to true
  replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'
      
- name: Create containerd.service.d directory
  file:
    path: /etc/systemd/system/containerd.service.d
    state: directory

- name: create containerd proxy file
  file:
    path: /etc/systemd/system/containerd.service.d/http-proxy.conf
    state: "touch"

- name: set containerd proxy file
  blockinfile:
    path: /etc/systemd/system/containerd.service.d/http-proxy.conf
    block: |
      [Service]
      Environment="HTTP_PROXY=http://172.17.19.30:8888"
      Environment="HTTPS_PROXY=http://172.17.19.30:8888"
      Environment="NO_PROXY=172.17.15.142,172.17.15.143,172.17.15.144,172.17.15.145,172.17.15.146,192.168.0.0/16,10.96.0.0/12" 
- name: restart containerd
  shell: |
    systemctl daemon-reload
    systemctl enable containerd --now

- name: disable swap & firewalld
  shell: |
    sudo swapoff -a
    sed -ri 's/.*swap.*/#&/' /etc/fstab
    sudo ufw disable
    systemctl stop NetworkManager 
    systemctl disable  NetworkManager
    sudo setenforce 0
    sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
  ignore_errors: true

- name: Creating a configuration file for k8s_step1
  file:
    path: "/etc/modules-load.d/k8s.conf"
    state: "touch"

- name: setting up pre-requisites for k8s_step1
  blockinfile:
    path: "/etc/modules-load.d/k8s.conf"
    block: 
      br_netfilte

- name: Creating a configuration file for k8s_step2
  file:
    path: "/etc/sysctl.d/k8s.conf"
    state: "touch"

- name: setting up pre-requisites for k8s_step2
  blockinfile:
    path: "/etc/sysctl.d/k8s.conf"
    block: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1

- name: make settings applicable without restart
  command: sudo sysctl --system

- name: install and configure dependencies
  shell: |
    sudo apt-get update && sudo apt-get install -y apt-transport-https curl
    curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

- name: Create kubernetes repo file
  file:
    path: "/etc/apt/sources.list.d/kubernetes.list"
    state: "touch"
    
- name: Add K8s Source
  blockinfile:
    path: "/etc/apt/sources.list.d/kubernetes.list"
    block: |
      deb https://apt.kubernetes.io/ kubernetes-xenial main

- name: install kubernetes
  shell: |
    sudo apt update
    sudo apt-get update
    sudo apt-get install -y kubelet=1.24.1-00 kubeadm=1.24.1-00 kubectl=1.24.1-00
    sudo apt-mark hold kubelet kubeadm kubectl

- name: enable kubelet now
  shell: sudo systemctl enable kubelet --now 

- name: create kubeadm config file
  shell: kubeadm config print init-defaults --kubeconfig ClusterConfiguration > /kubeadm.yml

- name: change kubeadm config addr
  lineinfile: 
    dest: /kubeadm.yml
    regexp: "^  advertiseAddress"
    # kmaster IP
    line: "  advertiseAddress: 172.17.15.142"
  
- name: change kubeadm config bindPort
  lineinfile:
    dest: /kubeadm.yml
    regexp: "^  bindPort: 6443"
    line: "  bindPort: 443"
  
- name: change kubeadm config imagePullPolicy to Never
  lineinfile:
    dest: /kubeadm.yml
    regexp: "^  imagePullPolicy: IfNotPresent"
    line: "  imagePullPolicy: Never" 
  
- name: change kubeadm config node name
  lineinfile:
    dest: /kubeadm.yml
    regexp: "^  name"
    # kmaster host name
    line: "  name: ENSKLGKUBPRD01"
  
- name: change kubeadm config k8s Version
  lineinfile:
    dest: /kubeadm.yml
    regexp: "^kubernetesVersion"
    line: "kubernetesVersion: 1.24.1"
  
- name: add podSubnet to kubeadm config
  lineinfile:
    dest: /kubeadm.yml
    insertbefore: "^  dnsDomain"
    line: "  podSubnet: 192.168.0.0/16"

- name: download related images
  shell: |
    kubeadm config images list --config /kubeadm.yml
    for i in `kubeadm config images list --config kubeadm.yml`;do ctr images pull $i;done 

- name: kubeadm init
  shell: |
    kubeadm init --config=/kubeadm.yml --upload-certs | tee kubeadm-init.log
    # may should sudo su first
    mkdir -p $HOME/.kube
    sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    sudo chown $(id -u):$(id -g) $HOME/.kube/config
- name: deploy CNI - Calico
  shell: |
    kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.5/manifests/tigera-operator.yaml
    kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.5/manifests/custom-resources.yaml

- name: get join command
  shell: kubeadm token create --print-join-command 
  register: join_command

- name: show join command
  debug: var=join_command verbosity=0
